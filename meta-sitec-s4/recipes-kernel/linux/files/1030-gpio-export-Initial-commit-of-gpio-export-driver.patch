From 95d3bc359c195e9423091cf4832560dbcedafc13 Mon Sep 17 00:00:00 2001
From: Robert Lehmann <robert.lehmann@sitec-systems.de>
Date: Wed, 12 Sep 2018 13:25:47 +0200
Subject: [PATCH 1030/1030] gpio-export: Initial commit of gpio export driver

gpio-export driver is responsible to initialize gpios with defined
parameters at boot time. These parameters are defined in the device
tree.

Ticket #2539
---
 drivers/misc/Kconfig       |   6 ++
 drivers/misc/Makefile      |   1 +
 drivers/misc/gpio-export.c | 145 +++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 152 insertions(+)
 create mode 100644 drivers/misc/gpio-export.c

diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index e52a938..72fd570 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -534,6 +534,12 @@ config SRAM
 	  the genalloc API. It is supposed to be used for small on-chip SRAM
 	  areas found on many SoCs.
 
+config GPIOEXPORT
+    bool "Export GPIO to userspace at bootup"
+    depends on GPIOLIB
+    help
+        This option enables the export of gpios at boottime
+
 config GPIO_WAKEUP
 	tristate "GPIO wakeup driver"
 	depends on PM_SLEEP && OF
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 5ee7c3f..e94d6ab 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -54,6 +54,7 @@ obj-$(CONFIG_INTEL_MEI)		+= mei/
 obj-$(CONFIG_VMWARE_VMCI)	+= vmw_vmci/
 obj-$(CONFIG_LATTICE_ECP3_CONFIG)	+= lattice-ecp3-config.o
 obj-$(CONFIG_SRAM)		+= sram.o
+obj-$(CONFIG_GPIOEXPORT) += gpio-export.o
 obj-y				+= mic/
 obj-$(CONFIG_GENWQE)		+= genwqe/
 obj-$(CONFIG_GPIO_WAKEUP) += gpio-wakeup.o
diff --git a/drivers/misc/gpio-export.c b/drivers/misc/gpio-export.c
new file mode 100644
index 0000000..b3dd0e1
--- /dev/null
+++ b/drivers/misc/gpio-export.c
@@ -0,0 +1,145 @@
+/*
+ * Export GPIOs to userspace at bootup
+ *
+ * Copyright (C) 2017 sitec systems GmbH
+ * Author: Robert Lehmann <robert.lehmann@sitec-systems.de>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+#define DEBUG
+
+#include <linux/gpio.h>
+#include <linux/gpio/consumer.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/of_gpio.h>
+#include <linux/slab.h>
+#include <linux/string.h>
+
+struct gpio_exp_data {
+    int gpio;
+    struct device *dev;
+};
+
+static int gpio_exp_get_gpio(struct device_node *np)
+{
+    int gpio;
+    int ret;
+    const char *gpio_num;
+
+    // first try to get named gpio
+    gpio = of_get_named_gpio(np, "en-gpio", 0);
+    if (gpio > 0) {
+        return gpio;
+    }
+
+    // second try to get gpio number from string
+    ret = of_property_read_string(np, "en-gpio-number", &gpio_num);
+    if (ret != 0) {
+        return ret;
+    }
+
+    ret = kstrtoint(gpio_num, 10, &gpio);
+    if (ret != 0) {
+        return ret;
+    }
+
+    return gpio;
+}
+
+static int gpio_exp_probe(struct platform_device *pdev)
+{
+    int ret;
+    struct device *dev = &pdev->dev;
+    struct device_node *np = dev->of_node;
+    struct gpio_exp_data *p;
+    const char* name;
+    int gpiomode = GPIOF_IN;
+
+    if (!np) {
+        return -EINVAL;
+    }
+
+    p = devm_kzalloc(dev, sizeof(struct gpio_exp_data), GFP_KERNEL);
+    if (!p) {
+        return -ENOMEM;
+    }
+
+    p->gpio = gpio_exp_get_gpio(np);
+    if (p->gpio <= 0) {
+        dev_err(dev, "Can't get GPIO from DT");
+        ret = -EINVAL;
+        goto err;
+    }
+
+    ret = of_property_read_string(np, "en-name", &name);
+    if (ret != 0) {
+
+        dev_err(dev, "Can't read export name for GPIO");
+        ret = -EINVAL;
+        goto err;
+    }
+
+    if (of_property_read_bool(np, "en-output-low")) {
+        gpiomode = GPIOF_OUT_INIT_LOW;
+    } else if (of_property_read_bool(np, "en-output-high")) {
+        gpiomode = GPIOF_OUT_INIT_HIGH;
+    }
+
+    if (!gpio_is_valid(p->gpio)) {
+        dev_err(dev, "GPIO %d is not valid", p->gpio);
+        ret = -EINVAL;
+        goto err;
+    }
+
+    ret = gpio_request_one(p->gpio, gpiomode, name);
+    if (ret != 0) {
+        dev_err(dev, "Can't request GPIO %d", p->gpio);
+        ret = -EIO;
+        goto err;
+    }
+
+    if (of_property_read_bool(np, "en-do-export")) {
+        ret = gpio_export(p->gpio, false);
+        if (ret != 0) {
+            dev_err(dev, "Can't export GPIO %d to userspace", p->gpio);
+            ret = -EIO;
+            goto err;
+        }
+    }
+
+    dev_info(dev, "Successfully exported GPIO %d for %s", p->gpio, name);
+
+    return 0;
+
+err:
+    devm_kfree(dev, p);
+    return ret;
+}
+
+static struct of_device_id gpio_exp_of_match[] = {
+    { .compatible = "gpio-export", },
+    { },
+};
+
+MODULE_DEVICE_TABLE(of, gpio_exp_of_match);
+
+static struct platform_driver gpio_exp_driver = {
+    .probe = gpio_exp_probe,
+    .driver = {
+        .name = "gpio-export",
+        .owner = THIS_MODULE,
+        .of_match_table = of_match_ptr(gpio_exp_of_match)
+    }
+};
+
+module_platform_driver(gpio_exp_driver);
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Robert Lehmann <robert.lehmann@sitec-systems.de>");
+MODULE_DESCRIPTION("Platform driver for exporting gpios at boot time");
+MODULE_ALIAS("platform:gpio_exp");
-- 
2.7.4

